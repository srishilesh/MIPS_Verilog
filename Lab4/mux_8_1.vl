module mux_8_1(a,b,c,d,e,f,g,h,sel,out);
input a,b,c,d,e,f,g,h;
input [2:0]sel;
output reg out;
always @(a or b or c or d or e or f or g or h or sel)
begin
case(sel)
3'b000: out = a;
3'b001: out = b;
3'b010: out = c;
3'b011: out = d;
3'b100: out = e;
3'b101: out = f;
3'b110: out = g;
3'b111: out = h;
default:out = 1'bx;
endcase
end
endmodule


module andgate(a,b,y);
input a,b;
output y;
assign y = a&b;
endmodule

module orgate(a,b,y);
input a,b;
output y;
assign y = a | b ;
endmodule

module notgate(a,y);
input a;
output y;
assign y = !a ;
endmodule

module xorgate(a,b,y);
input a,b;
output y;
assign y = a ^ b;
endmodule

module xnorgate(a,b,y);
input a,b;
output y;
assign y = !((a) ^ (b));
endmodule

module nandgate(a,b,y);
input a,b;
output y;
assign y = !(a & b) ;
endmodule

